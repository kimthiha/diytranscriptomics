#Liu et al SmkInitPerWeek on VUCKOVIC 2020 CELL blood traits
###########################################
##  Below is the iterative run for all blood traits, it will filter and clump blood trait exposures if needed
###############################
#install.packages("vctrs")
#install.packages("remotes")
#remotes::install_github("MRCIEU/TwoSampleMR")
#install.packages('R.utils')
library(dplyr)
library(stringr)
library(ggplot2)
library(data.table)
#library(MVMR)
library(TwoSampleMR)
#library(MRPRESSO)
############do MR based on filtered files
setwd("/Users/kimtha/Documents/rotations/fall/MR_output/")
# find blood trait clumped files
files <- list.files(path="/Users/kimtha/Documents/rotations/fall/MR_output/", pattern="*Clumped", full.names=FALSE, recursive=FALSE)
cat(files)
lapply(files, function(x) {
e3_clump <- fread(paste0("/Users/kimtha/Documents/rotations/fall/MR_output/", x), header=TRUE)
#split at . and use 1st sapply
spl <- strsplit(x, "." ,fixed=TRUE)
trait <- sapply(spl, "[", 1) #first element is trait, second is 'filtered, third 'txt'
#e3_comm$Phenotype <- trait  #this file has already been clumped and is in 'exposure' format, with Phenotype as 'exposure' and Beta as 'beta.exposure' etc
e1_clump <- e1_comm[e1_comm$"#SNP" %in% e3_clump$"SNP"]
#print(colnames(e1_clump))
e1_clump <- format_data(e1_clump, type="outcome", snps= e1_clump$"#SNP", header=T, phenotype_col = "Phenotype", snp_col="#SNP",
beta_col="beta", se_col="SE_GC",
eaf_col="Coded_freq", effect_allele_col="Coded",
other_allele_col="Non_coded", pval_col="P_GC")
cat(nrow(e1_clump))
###TwoSample MR
#harmonize
dat1 <- harmonise_data(exposure_dat = e3_clump, outcome_dat = e1_clump)
#print out instrument stats (for supp table) and R2 for F statistic (based on Shim et al PMID 25898129).
print("this is R2 for the F-statistic based on Shim et al - plug in to mRnd")
# sample size for BMI is 547261, SmkInit is 557337 per Dan Hui (paper says up to 1,232,091) --- Using Dan's estimate, Yengo BMI is 700000, Vuckovic blood is 563085
dat1$r2 <- 2*(dat1$beta.exposure)^2 * dat1$eaf.exposure * (1-dat1$eaf.exposure) /
(2*(dat1$beta.exposure)^2 * dat1$eaf.exposure * (1-dat1$eaf.exposure) +
(dat1$se.exposure)^2*2*563085*dat1$eaf.exposure * (1-dat1$eaf.exposure))
#or could use generic, with fstat$samplesize.outcome
#dat$r2 <- 2*(dat$beta.outcome)^2 * dat$eaf.outcome * (1-dat$eaf.outcome) / (2*(dat$beta.outcome)^2 * dat$eaf.outcome * (1-dat$eaf.outcome) + (dat$se.outcome)^2*2*dat$samplesize.outcome*dat$eaf.outcome * (1-dat$eaf.outcome))
cat("r2\t")
cat(sum(dat1$r2))
cat("\n\n")
write.table(dat1, paste0(trait,".asthma.TwoSample.IV.txt"), quote=F,col.names=T,row.names=F,sep="\t")
#run MR
res <- mr(dat1)
write.table(res,paste0(trait,".asthma.TwoSample.MR.txt"),quote=F,col.names=T,row.names=F,sep="\t")
het <- mr_heterogeneity(dat1)
write.table(het,paste0(trait,".asthma.TwoSample.heterogeneity.txt"),quote=F,col.names=T,row.names=F,sep="\t")
hp <- mr_pleiotropy_test(dat1)
write.table(hp,paste0(trait,".asthma.TwoSample.pleiotropy.txt"),quote=F,col.names=T,row.names=F,sep="\t")
##Plots
#Scatterplot
pdf(paste0("asthma.", trait, ".Scatterplot.pdf"))
p1 <- mr_scatter_plot(res, dat1)
print(p1[[1]])
dev.off()
#Forest plot
pdf(paste0("asthma.", trait, ".Forestplot.pdf"))
res_single <- mr_singlesnp(dat1)
p2 <- mr_forest_plot(res_single)
print(p2[[1]])
dev.off()
pdf(paste0("asthma.", trait, ".Forestplot.pdf"))
res_single <- mr_singlesnp(dat1, all_method=c("mr_ivw", "mr_two_sample_ml"))
p3 <- mr_forest_plot(res_single)
print(p3[[1]])
dev.off()
#Leave One Out Plot
pdf(paste0("asthma.", trait, ".LeaveOneOutplot.pdf"))
res_loo <- mr_leaveoneout(dat1)
p4 <- mr_leaveoneout_plot(res_loo)
print(p4[[1]])
dev.off()
#Good forest plot with actual estimates
pdf(paste0(trait,".asthma.TwoSample.Good.forestplot.pdf"))
res_single <- mr_singlesnp(dat1, all_method = c("mr_ivw", "mr_egger_regression", "mr_weighted_median"))
singlesnp_results <- res_single
exponentiate <- FALSE
requireNamespace("ggplot2", quietly = TRUE)
requireNamespace("plyr", quietly = TRUE)
res <- plyr::dlply(singlesnp_results, c("id.exposure", "id.outcome"), function(d) {
d <- plyr::mutate(d)
if (sum(!grepl("All", d$SNP)) < 2) {
return(blank_plot("Insufficient number of SNPs"))
}
levels(d$SNP)[levels(d$SNP) == "All - Inverse variance weighted"] <- "Inverse variance weighted"
levels(d$SNP)[levels(d$SNP) == "All - MR Egger"] <- "MR Egger"
levels(d$SNP)[levels(d$SNP) == "All - Weighted median"] <- "Weighted median"
#d[d$SNP == "All - Inverse variance weighted", "SNP"] <- "Inverse variance weighted"
#d[d$SNP == "All - MR Egger", "SNP"] <- "MR Egger"
#d[d$SNP == "All - Weighted median", "SNP"] <- "Inverse variance weighted"
am <- grep("All", d$SNP, value = TRUE)
d$up <- d$b + 1.96 * d$se
d$lo <- d$b - 1.96 * d$se
####### change unit depending on binary/continuous!!!
# binary: e.g. smoking initiation
#d$b <- exp(d$b * log(2))
#d$up <- exp(d$up * log(2))
#d$lo <- exp(d$lo * log(2))
# continuous: e.g., LfSmk, BMI
d$b <- exp(d$b)
d$up <- exp(d$up)
d$lo <- exp(d$lo)
d$tot <- 0.01
d$tot[d$SNP %in% am] <- 1
d$SNP <- as.character(d$SNP)
nom <- d$SNP[!d$SNP %in% am]
nom <- nom[order(d$b)]
d <- rbind(d, d[nrow(d), ])
#d$SNP[nrow(d) - 1] <- ""
#d$b[nrow(d) - 1] <- NA
#d$up[nrow(d) - 1] <- NA
#d$lo[nrow(d) - 1] <- NA
d$SNP <- ordered(d$SNP, levels = c(am, "", nom))
xint <- 0
if (exponentiate) {
d$b <- exp(d$b)
d$up <- exp(d$up)
d$lo <- exp(d$lo)
xint <- 1
}
#print(tail(d, 4))
d <- tail(d, 4)
d <- head(d, 3)
d[d$SNP == "Inverse variance weighted", "samplesize"] <- 3
d[d$SNP == "Weighted median", "samplesize"] <- 2
d[d$SNP == "MR Egger", "samplesize"] <- 1
d$SNP2 <- reorder(d$SNP, d$samplesize)
print(d)
ggplot2::ggplot(d, aes(y = SNP2, x = b)) +
ggplot2::geom_vline(xintercept = 1, linetype = "dotted") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = lo, xmax = up, size=as.factor(tot),colour = as.factor(tot)), size=4,
height = 0) + ggplot2::geom_point(ggplot2::aes(colour = as.factor(tot)), size=16)  +
ggplot2::scale_colour_manual(values = c("black", "red")) +
ggplot2::scale_size_manual(values = c(0.3, 1)) +
ggplot2::theme(legend.position = "none",
axis.text.y = ggplot2::element_text(size = 14),
axis.ticks.y = ggplot2::element_line(size = 0),
axis.title.x = ggplot2::element_text(size = 14)) +
ggplot2::labs(y = "", x = paste0("MR odds ratio for\n'",
d$exposure[1], "' on '", d$outcome[1], "'"))
})
p2 <- res
print(p2[[1]])
dev.off()
}) #this is the end of the lapply from the start of MR
###########   Filter
### Load data and filter. Have arbitrarily chosen MPV as the blood trait of choice here to initially filter (other blood traits done in 2nd part)
setwd("/Users/kimtha/Documents/rotations/fall/MR_output/")
if(isTRUE(file.exists("asthma.filtered.txt") & file.exists("BAS.Clumped"))) {
print("Working from pre-tabulated filtered and clumped files")
e1_comm <- fread("asthma.filtered.txt", header=T)
} else {
print("Loading summ stats and making filtered files")
### Load data and filter. Have arbitrarily chosen MPV as the blood trait of choice here to initially filter (other blood traits done in 2nd part)
e1<- fread("/Users/kimtha/Documents/rotations/fall/GWAS_summary_stats/asthma.txt.gz", header=T)
e1$Phenotype<- "asthma"
#e1$SNP<- e1$RSID
e1$ChrPosRefAlt<- paste0(e1$Chromosome, ":", e1$Position_b37, "_", e1$Coded, "_", e1$Non_coded)
e1$ChrPosAltRef<- paste0(e1$Chromosome, ":", e1$Position_b37, "_", e1$Non_coded, "_", e1$Coded)
e3<- fread("/Users/kimtha/Documents/rotations/fall/GWAS_summary_stats/BCX2_BAS_EA_GWAMA.out.gz", header=T)
e3$Phenotype<- "BAS"
e1_a<- e1[e1$ChrPosRefAlt %in% e3$rs_number,]
e1_b<- e1[e1$ChrPosAltRef %in% e3$rs_number,]
e1_comm<- bind_rows(e1_a,e1_b)
#names(e1_comm)[names(e1_comm) == "#SNP"] <- "SNP"
e3_joina<- left_join(e1_a, e3, by= c("ChrPosRefAlt" = "rs_number"))
e3_joinb<- left_join(e1_b, e3, by= c("ChrPosAltRef" = "rs_number"))
e3_comm<- bind_rows(e3_joina, e3_joinb)
write.table(e1_comm, "asthma.filtered.txt", sep="\t", quote= FALSE, row.names= FALSE, col.names= TRUE)
#write.table(e3_comm, "MPV.filtered.txt", sep="\t", quote= FALSE, row.names= FALSE, col.names= TRUE) # this should match what is later output as 'MPV.filtered'
}
############do MR based on filtered files
setwd("/Users/kimtha/Documents/rotations/fall/MR_output/")
# find blood trait clumped files
files <- list.files(path="/Users/kimtha/Documents/rotations/fall/MR_output/", pattern="*Clumped", full.names=FALSE, recursive=FALSE)
cat(files)
lapply(files, function(x) {
e3_clump <- fread(paste0("/Users/kimtha/Documents/rotations/fall/MR_output/", x), header=TRUE)
#split at . and use 1st sapply
spl <- strsplit(x, "." ,fixed=TRUE)
trait <- sapply(spl, "[", 1) #first element is trait, second is 'filtered, third 'txt'
#e3_comm$Phenotype <- trait  #this file has already been clumped and is in 'exposure' format, with Phenotype as 'exposure' and Beta as 'beta.exposure' etc
e1_clump <- e1_comm[e1_comm$"#SNP" %in% e3_clump$"SNP"]
#print(colnames(e1_clump))
e1_clump <- format_data(e1_clump, type="outcome", snps= e1_clump$"#SNP", header=T, phenotype_col = "Phenotype", snp_col="#SNP",
beta_col="beta", se_col="SE_GC",
eaf_col="Coded_freq", effect_allele_col="Coded",
other_allele_col="Non_coded", pval_col="P_GC")
cat(nrow(e1_clump))
###TwoSample MR
#harmonize
dat1 <- harmonise_data(exposure_dat = e3_clump, outcome_dat = e1_clump)
#print out instrument stats (for supp table) and R2 for F statistic (based on Shim et al PMID 25898129).
print("this is R2 for the F-statistic based on Shim et al - plug in to mRnd")
# sample size for BMI is 547261, SmkInit is 557337 per Dan Hui (paper says up to 1,232,091) --- Using Dan's estimate, Yengo BMI is 700000, Vuckovic blood is 563085
dat1$r2 <- 2*(dat1$beta.exposure)^2 * dat1$eaf.exposure * (1-dat1$eaf.exposure) /
(2*(dat1$beta.exposure)^2 * dat1$eaf.exposure * (1-dat1$eaf.exposure) +
(dat1$se.exposure)^2*2*563085*dat1$eaf.exposure * (1-dat1$eaf.exposure))
#or could use generic, with fstat$samplesize.outcome
#dat$r2 <- 2*(dat$beta.outcome)^2 * dat$eaf.outcome * (1-dat$eaf.outcome) / (2*(dat$beta.outcome)^2 * dat$eaf.outcome * (1-dat$eaf.outcome) + (dat$se.outcome)^2*2*dat$samplesize.outcome*dat$eaf.outcome * (1-dat$eaf.outcome))
cat("r2\t")
cat(sum(dat1$r2))
cat("\n\n")
write.table(dat1, paste0(trait,".asthma.TwoSample.IV.txt"), quote=F,col.names=T,row.names=F,sep="\t")
#run MR
res <- mr(dat1)
write.table(res,paste0(trait,".asthma.TwoSample.MR.txt"),quote=F,col.names=T,row.names=F,sep="\t")
het <- mr_heterogeneity(dat1)
write.table(het,paste0(trait,".asthma.TwoSample.heterogeneity.txt"),quote=F,col.names=T,row.names=F,sep="\t")
hp <- mr_pleiotropy_test(dat1)
write.table(hp,paste0(trait,".asthma.TwoSample.pleiotropy.txt"),quote=F,col.names=T,row.names=F,sep="\t")
##Plots
#Scatterplot
pdf(paste0("asthma.", trait, ".Scatterplot.pdf"))
p1 <- mr_scatter_plot(res, dat1)
print(p1[[1]])
dev.off()
#Forest plot
pdf(paste0("asthma.", trait, ".Forestplot.pdf"))
res_single <- mr_singlesnp(dat1)
p2 <- mr_forest_plot(res_single)
print(p2[[1]])
dev.off()
pdf(paste0("asthma.", trait, ".Forestplot.pdf"))
res_single <- mr_singlesnp(dat1, all_method=c("mr_ivw", "mr_two_sample_ml"))
p3 <- mr_forest_plot(res_single)
print(p3[[1]])
dev.off()
#Leave One Out Plot
pdf(paste0("asthma.", trait, ".LeaveOneOutplot.pdf"))
res_loo <- mr_leaveoneout(dat1)
p4 <- mr_leaveoneout_plot(res_loo)
print(p4[[1]])
dev.off()
#Good forest plot with actual estimates
pdf(paste0(trait,".asthma.TwoSample.Good.forestplot.pdf"))
res_single <- mr_singlesnp(dat1, all_method = c("mr_ivw", "mr_egger_regression", "mr_weighted_median"))
singlesnp_results <- res_single
exponentiate <- FALSE
requireNamespace("ggplot2", quietly = TRUE)
requireNamespace("plyr", quietly = TRUE)
res <- plyr::dlply(singlesnp_results, c("id.exposure", "id.outcome"), function(d) {
d <- plyr::mutate(d)
if (sum(!grepl("All", d$SNP)) < 2) {
return(blank_plot("Insufficient number of SNPs"))
}
levels(d$SNP)[levels(d$SNP) == "All - Inverse variance weighted"] <- "Inverse variance weighted"
levels(d$SNP)[levels(d$SNP) == "All - MR Egger"] <- "MR Egger"
levels(d$SNP)[levels(d$SNP) == "All - Weighted median"] <- "Weighted median"
#d[d$SNP == "All - Inverse variance weighted", "SNP"] <- "Inverse variance weighted"
#d[d$SNP == "All - MR Egger", "SNP"] <- "MR Egger"
#d[d$SNP == "All - Weighted median", "SNP"] <- "Inverse variance weighted"
am <- grep("All", d$SNP, value = TRUE)
d$up <- d$b + 1.96 * d$se
d$lo <- d$b - 1.96 * d$se
####### change unit depending on binary/continuous!!!
# binary: e.g. smoking initiation
#d$b <- exp(d$b * log(2))
#d$up <- exp(d$up * log(2))
#d$lo <- exp(d$lo * log(2))
# continuous: e.g., LfSmk, BMI
d$b <- exp(d$b)
d$up <- exp(d$up)
d$lo <- exp(d$lo)
d$tot <- 0.01
d$tot[d$SNP %in% am] <- 1
d$SNP <- as.character(d$SNP)
nom <- d$SNP[!d$SNP %in% am]
nom <- nom[order(d$b)]
d <- rbind(d, d[nrow(d), ])
#d$SNP[nrow(d) - 1] <- ""
#d$b[nrow(d) - 1] <- NA
#d$up[nrow(d) - 1] <- NA
#d$lo[nrow(d) - 1] <- NA
d$SNP <- ordered(d$SNP, levels = c(am, "", nom))
xint <- 0
if (exponentiate) {
d$b <- exp(d$b)
d$up <- exp(d$up)
d$lo <- exp(d$lo)
xint <- 1
}
#print(tail(d, 4))
d <- tail(d, 4)
d <- head(d, 3)
d[d$SNP == "Inverse variance weighted", "samplesize"] <- 3
d[d$SNP == "Weighted median", "samplesize"] <- 2
d[d$SNP == "MR Egger", "samplesize"] <- 1
d$SNP2 <- reorder(d$SNP, d$samplesize)
print(d)
ggplot2::ggplot(d, aes(y = SNP2, x = b)) +
ggplot2::geom_vline(xintercept = 1, linetype = "dotted") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = lo, xmax = up, size=as.factor(tot),colour = as.factor(tot)), size=4,
height = 0) + ggplot2::geom_point(ggplot2::aes(colour = as.factor(tot)), size=16)  +
ggplot2::scale_colour_manual(values = c("black", "red")) +
ggplot2::scale_size_manual(values = c(0.3, 1)) +
ggplot2::theme(legend.position = "none",
axis.text.y = ggplot2::element_text(size = 14),
axis.ticks.y = ggplot2::element_line(size = 0),
axis.title.x = ggplot2::element_text(size = 14)) +
ggplot2::labs(y = "", x = paste0("MR odds ratio for\n'",
d$exposure[1], "' on '", d$outcome[1], "'"))
})
p2 <- res
print(p2[[1]])
dev.off()
}) #this is the end of the lapply from the start of MR
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
BiocManager::install(version = "3.18")
View(e1_comm)
clear
setwd("~/Documents/diytranscriptomics/dataset/kallisto_output")
setRepositories()
install.packages("rhdf5")
library(rhdf5)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
install.packages(tidyverse)
install.packages('tidyverse')
ibrary(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
install.packages('tximport','ensembldb','EnsDb.Hsapiens.v86','beepr')
install.packages(c("tximport", "ensembldb", "EnsDb.Hsapiens.v86", "beepr"), lib="/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library")
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
